_compose = lambda f: lambda g: lambda *a, **k: f(g(*a, **k))


@_compose('\n'.join)
def string_node_layout_to_tikz(formula_layout):
    '''Convert string diagram into tikz nodes.'''
    formulae = formula_layout.split()
    fmt = r'\node ({}) at ({}, {}) {{{}}};'
    for row_num, row in enumerate(formula_layout.split('\n')):
        col_num = 0
        while col_num < len(row):
            if row[col_num].isspace():
                col_num += 1
            else:
                formula = formulae.pop(0)
                yield fmt.format(formula, col_num // 5, -row_num * 2, formula)
                col_num += len(formula)

@_compose('\n'.join)
def tikzify_edges(edge_set, arrow_type='', avoid_overlap=()):
    '''Generate tiks arrows for a set of directed edges.

    An edge is a tuple (a, t1, ..., tn, b), where a is the beginning, b is the
    end, and t1 ... tn are (optional) labels. Generated arrows will avoid
    overlapping with any arrows that would be generated by edges in
    avoid_overlap, by bending arrows. Duplicate listings in avoid_overlap will
    cause further avoidance by further bending.
    '''
    avoid_overlap = list(avoid_overlap)
    if arrow_type:
        fmt = r'\draw[' + arrow_type + r', {}] ({}) to node {{}} ({});'
    else:
        fmt = r'\draw[{}] ({}) to node {{}} ({});'
    drawn = set()
    for a, *labels, b in edge_set:
        if labels:
            print("Failed to draw label")
        if (b, a) in drawn:
            continue
        elif (b, a) in edge_set:
            arrow = '<->'
        else:
            arrow = '->'
        if (a, b) in avoid_overlap or (b, a) in avoid_overlap:
            count = avoid_overlap.count((a, b)) + avoid_overlap.count((b, a))
            bend = 'bend left={},'.format(20 * count)
            yield fmt.format(bend + arrow, a, b)
        else:
            yield fmt.format(arrow, a, b)
        drawn.add((a, b))

@_compose('\n'.join)
def make_tikz_diagram(*contents, options='line width=0.3mm, auto'):
    '''Generate a tikz diagram.'''
    yield r'\begin{tikzpicture}[' + options + ']'
    yield from contents
    yield r'\end{tikzpicture}'

@_compose('\n'.join)
def make_columned_text(*text, fmt='{}', columns=3):
    yield r'\begin{multicols}{' + str(columns) + r'} \noindent'
    yield from ((fmt + '\\').format(t) for t in text)
    yield r'\end{multicols}'

@_compose('\n'.join)
def make_latex_document(body, extra_packages=()):
    yield r'\documentclass{article}'
    yield r'\usepackage{tikz}'
    yield r'\usepackage{fullpage}'
    yield r'\usepackage{multicol}'
    yield from (r'\usepackage{' + package + '}' for package in extra_packages)
    yield r'\begin{document}'
    yield body
    yield r'\end{document}'
